#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string>
using namespace std;

struct Player 
{
    string Name;
    int Score = 0;
    int Lost = 0;
    int Won = 0;
    int Played = 0;
    int Seed;
};
typedef struct Player PLAYER;

int RandomNumber(int a, int b)
{
    srand(time(NULL));
    int UnknownNum = rand() % (b - a + 1) + a;
    return UnknownNum;
}

void PlayGame(PLAYER Mem[],int playernumbers, int attemp, int SecretNum, int a, int b)
{
    int i = 1, x, pointa = a, pointb = b;
    printf("\n*** THE GAME STARTS ***\n");
    while (attemp > 0)
    {
        attemp--;
        printf("\nENTER YOUR [%d] GUESS: ", i);
        cin >> x;
        while (x < a || x > b)
        {
            printf("\nENTER YOUR [%d] GUESS AGAIN: ", i);
            cin >> x;
        }
        if (x != SecretNum)
        {
            if (attemp > 0)
            {
                if (x > SecretNum)
                    b = x;
                else a = x;
                printf("\nWRONG NUMBER !!! LET TRY AGAIN \n");
                printf("THE RANGE AFTER YOUR [%d] GUESSING IS [%d;%d]\n",i,a,b);
            }
            else
            {
                Mem[playernumbers].Lost++;
                Mem[playernumbers].Played++;
                printf("\n*** YOU HAVE LOST !!! >< ***\n");
                printf("THE SECRET NUMBER IN THE RANGE IS %d !!!\n", SecretNum);
                printf("*** BETTER LUCK NEXT TIME <3 ***\n");
            }
        }
        else
        {
            int score;
            if (pointb - pointa + 1 < 100)
                score = 1;
            else if (pointb - pointa + 1 >= 100 && pointb - pointa + 1 <= 500)
                score = 2;
            else if (pointb - pointa + 1 > 500 && pointb - pointa + 1 <= 1000)
                score = 3;
            else if (pointb - pointa + 1 > 1000 && pointb - pointa + 1 <= 5000)
                score = 4;
            else if (pointb - pointa + 1 > 5000)
                score = 10;
            Mem[playernumbers].Won++;
            Mem[playernumbers].Played++;
            Mem[playernumbers].Score += score;
            printf("\n*** CONGRATULATION ***\n");
            printf("*** YOU HAVE FOUND THE SECRET NUMBER ***\n");
            cout << Mem[playernumbers].Name << " GOT " << score << " !!! " << endl;
            break;
        }
        i++;
    }
}

void RankingPlayer(PLAYER Mem[], int quantity)
{
    int tempnum;
    string tempname;
    if(quantity > 1)
    for (int i = 1; i <= quantity; i++)
        for (int j = i + 1; j <= quantity; j++)
        {
            if (Mem[j].Score > Mem[i].Score)
            {
                tempname = Mem[i].Name;
                Mem[i].Name = Mem[j].Name;
                Mem[j].Name = tempname;
                tempnum = Mem[i].Played;
                Mem[i].Played = Mem[j].Played;
                Mem[j].Played = tempnum;
                tempnum = Mem[i].Lost;
                Mem[i].Lost = Mem[j].Lost;
                Mem[j].Lost = tempnum;
                tempnum = Mem[i].Won;
                Mem[i].Won = Mem[j].Won;
                Mem[j].Won = tempnum;
                tempnum = Mem[i].Score;
                Mem[i].Score = Mem[j].Score;
                Mem[j].Score = tempnum;
            }
        }
    printf("\n*** PLAYER RANKING ***\n");
    printf(" RANK\tNAME\tPLAYED\tLOST\tWON\t\SCORE\t\n");
    int rank = 1;
    for (int i = 1; i <= quantity; i++)
    {
        cout << rank << "\t" << Mem[i].Name << "\t" << Mem[i].Played << "\t" << Mem[i].Lost << "\t" << Mem[i].Won << "\t" << Mem[i].Score << endl;
        if ((Mem[i].Score > Mem[i + 1].Score) || (Mem[i].Score == Mem[i + 1].Score && Mem[i].Played < Mem[i + 1].Played))
            rank += 1;
    }
}

void checkplayerseed(PLAYER Mem[], string name, int &playernumbers, int &quantity)
{
    int flag = 0;
    for (int i = 1; i <= quantity; i++)
        if (Mem[i].Name == name)
        {
            flag = 1;
            playernumbers = Mem[i].Seed;
            break;
        }
    if (flag == 0)
    {
        quantity++;
        playernumbers = quantity;
        Mem[playernumbers].Name = name;
        Mem[playernumbers].Seed = quantity;
    }
}

int main(void)
{
    PLAYER player[1000];
    int playernumbers;
    int quantity = 0;
    char response ='k';
    string name;
    do
    {
        printf("*** WELCOME TO THE GUESS-SECRET-NUMBER GAME ***\n");
        int a, b, attemp ;
        if(response == 'k')
        {
            printf("\n*** TYPE YOUR NAME ***\n");
            cin >> name;
            checkplayerseed(player, name, playernumbers, quantity);
            response = 'i';
        } 
        printf("*** GIVE A RANGE [A;B] FROM 0 TO 10000 TO GUESS: ***\n");
        cin >> a >> b;
        while (a < 0 || b < 0 || a > b || a > 10000 || b > 10000)
        {
            printf("*** YOUR RANGE IS INVALID ***\n");
            printf("PLEASE GIVE A PROPER RANGE:\n");
            cin >> a >> b;
        }
        if (b - a + 1 <= 100)
            attemp = 5;
        else if (b - a + 1 > 100  && b - a + 1 <= 2000)
            attemp = 10;
        else if (b - a + 1 > 3000)
            attemp = 20;
        printf("*** YOU WILL GUESS THE SECRET NUMBER BETWEEN %d & %d ***\n", a, b);
        printf("*** YOU HAVE %d ATTEMPS ***\n", attemp);
        PlayGame(player, playernumbers, attemp, RandomNumber(a, b), a, b);
        RankingPlayer(player, quantity);
        printf("\nDO YOU WANT TO PLAY AGAIN ? (ANSWERS y/n): \n");
        cin >> response;
        if (response == 'y')
        {
            printf("\nDO YOU WANT TO CONTINUE OR PLAY A NEW GAME ? (ANSWER c/k):\n ");
            cin >> response;
        }
    } while (response == 'k' || response == 'c');
    printf("\n*** THANKS FOR PLAYING. SEE YOU NEXT TIME ! ***\n");
    return 0;
}

